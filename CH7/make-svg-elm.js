function MKHTMLElm(P, Elm, Attribs, Events) {//// ref="MKHTMLElmS"
  let HTMLNS = "http://www.w3.org/1999/xhtml";//// ref="HTMLNS"
  return MakeElement(HTMLNS, P, Elm, Attribs, Events)//// ref="MKHTMLElmM"
}//// ref="MKHTMLElmE"
function MKSVGElm(P, Elm, Attribs, Events) {//// ref="MKSVGElmS"
  let SVGNS = "http://www.w3.org/2000/svg";//// ref="SVGNS"
  return MakeElement(SVGNS, P, Elm, Attribs, Events)//// ref="MKSVGElmM"
}//// ref="MKSVGElmE"
function MakeElement(NS, P, elem, attribs, events) {//// ref="MKElmS"
  let Element = document.createElementNS(NS,elem);//// ref="NS"
  SetAttributes(Element, attribs);//// ref="Attribs"
  AddEvents(Element, events);//// ref="Events"
  if(P) P.appendChild(Element);//// ref="Parent"
  return Element;//// ref="MKElmRet"
} //// ref="MKElmE"
function SetAttributes(Elm, attribs) {//// ref="setAttribsS"
  for( attrib in attribs) {//// ref="setAttribFor"
      Elm.setAttribute(attrib,attribs[attrib]);//// ref="setAttribM"
  }
}//// ref="setAttribsE"
function AddEvents(Elm, Events) {//// ref="addEventsS"
  for( event in Events) {//// ref="addEventsFor"
      Elm.addEventListener(event,Events[event][0], Events[event][1]);//// ref="addEventsM"
  }
}//// ref="addEventsE"
function RemoveEvents(Elm, Events) {//// ref="removeEventsS"
  for( event in Events) {//// ref="removeEventsFor"
      Elm.removeEventListener(event,Events[event][0], Events[event][1]);//// ref="removeEventsM"
  }
}//// ref="removeEventsE"
