<?xml version="1.0" encoding="utf-8" ?>
<html xmlns="http://www.w3.org/1999/xhtml" ref="html1"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:svg="http://www.w3.org/2000/svg">
<head>
  <script type="text/ecmascript" src="make-elm.js"/>
  <script type="text/ecmascript">
//    <![CDATA[
    var svgDoc, Ox, Oy, DragPoint = null;
    var Pos = [], P = [], Reg = [], PVal = [];
    var IPos =[[250,400,"red"],[530,400,"lime"],
               [410,130,"green"],[250,240,"orange"]];
    var NumPos = IPos.length;
    var paths =[["fill","#DDD", "stroke","none","opacity","0.8"],
                ["fill","#C22", "stroke","none","opacity","0.8"],
                ["fill","#3D3", "stroke","none","opacity","0.8"],
                ["stroke-width","2","fill","none","stroke","black"],
                ["stroke-width","3","fill","none","stroke","blue"],
                ["stroke-width","3","fill","none","stroke","yellow"],
                ["stroke-width","4","fill","none","stroke","black"]];
    function init() {
      var i, j, k, TR, TD, TD2, TBL;
      svgDoc = document.getElementById("canvas");
      MKSVGElm(svgDoc, "rect", 
        ["x", "0", "y", "0", "width", "700", "height", "500",
         "stroke-width", "3", "stroke", "black", "fill", "none"],[]);
      for(i=0;i<paths.length; i++) {
        Reg[i] = MKSVGElm(svgDoc, "path", paths[i],[]);
      }
      TBL = document.getElementById("Table");
      for(i=0; i<NumPos; i++) {
        TR = MKHTMLElm(TBL, "tr",[],[]);
        TD = MKHTMLElm(TR, "td",["style", "color:"+ IPos[i][2],"align","center"],[]);
        TD.appendChild(document.createTextNode("P"+i));
        PVal[i] = new BoxP(TR);
        Pos[i] = new Point(svgDoc, IPos[i][0], IPos[i][1], IPos[i][2], 6,
                ["mousedown", beginDrag, false, "mouseup", endDrag, false]);
      }
      for(k=(NumPos-1)*NumPos/2;k>0;k--,i++){
          Pos[i] = new Point(svgDoc, 0, 0, "black", "6", []);
      }
      document.getElementById("Portion").value="1/2";
      RefreshRegion();
    }
    function Point(P, cx, cy, fill, r,  Events) {
      this.Circle = MKSVGElm(P, "circle", 
         ["cx", cx, "cy", cy, "fill", fill, "r", r], Events);
      this.x = cx;
      this.y = cy;
    }
    Point.prototype.setPos = function(PV) {
      SetAttributes(this.Circle,["cx",PV.x.value, "cy", PV.y.value]);
      this.x = parseInt(PV.x.value);
      this.y = parseInt(PV.y.value);
    }
    Point.prototype.movePos = function(xx, yy) {
      SetAttributes(this.Circle,["cx",xx, "cy", yy]);
      this.x = xx;
      this.y = yy;
    }
    Point.prototype.getPos = function() {
      this.x = parseFloat(this.Circle.getAttribute("cx"));
      this.y = parseFloat(this.Circle.getAttribute("cy"));
    }
    Point.prototype.toSt = function() {
      return this.x+","+this.y+" ";
    }
    function BoxP(P) {
      var O = MKHTMLElm(P, "td",[],[]);
      this.x = MKHTMLElm(O, "input", ["type", "text", "size","3"],[]);
      O = MKHTMLElm(P, "td",[],[]);
      this.y = MKHTMLElm(O, "input", ["type", "text", "size","3"],[]);
    }
    BoxP.prototype.setVal = function(Po) {
      Po.getPos();
      this.x.value = Po.x;
      this.y.value = Po.y;
    }
    function SetPos() {
      for(var i=0;i<NumPos;i++) Pos[i].setPos(PVal[i]);
      RefreshRegionN();
    }
    function RefreshRegion(){
      for(var i=0;i<NumPos;i++) PVal[i].setVal(Pos[i]);
      RefreshRegionN();
    }
    function RefreshRegionN(){
      var i, j=NumPos, k, d, db, A;
      A = eval(document.getElementById("Portion").value);//alert(A);
      if(A>=1 || A<=0) {
        alert("Please set A between 0 and 1");
        A=0.5;
        document.getElementById("Portion").value="1/2";
      }
      d  = "M"+Pos[0].toSt();
      for(i=1, db = "";i<4;i++) db += Pos[i].toSt();
      Reg[6].setAttribute("d",d+"C"+db);
      d += db;
      for(i=NumPos; i>1; i--) {
        d+= "M";
        for(k=1; k<i; k++, j++) {
          Pos[j].movePos(Pos[j-i].x*(1-A)+Pos[j-i+1].x*A, 
                         Pos[j-i].y*(1-A)+Pos[j-i+1].y*A);
          d += Pos[j].toSt();//alert(j);
        }
      }
      Reg[3].setAttribute("d",d);
      Reg[4].setAttribute("d",
            "M"+Pos[0].toSt()+"Q"+Pos[1].toSt()+Pos[2].toSt());
      Reg[5].setAttribute("d",
            "M"+Pos[1].toSt()+"Q"+Pos[2].toSt()+Pos[3].toSt());
      PaintRegion(0,Pos[0],Pos[1],Pos[2],Pos[3]);
      PaintRegion(1,Pos[0],Pos[4],Pos[7],Pos[9]);
      PaintRegion(2,Pos[9],Pos[8],Pos[6],Pos[3]);
    }
    function PaintRegion(S, P0, P1, P2, P3){
      var path, PSS=getSign(P0,P1,P2);
      if(getSign(P0,P1,P3) != PSS) {
        if(getSign(P1,P2,P3)==PSS) {
          path = P3.toSt()+P1.toSt()+P2.toSt();
          if(getSign(P2,P0,P3)==PSS) path += P0.toSt();
        } else {
          path = P3.toSt()+P2.toSt()+P0.toSt();
        } 
      } else {
        if(getSign(P1,P2,P3)==PSS) {
          path = P0.toSt()+P1.toSt()+P2.toSt();
          if(getSign(P2,P0,P3)!=PSS) path += P3.toSt();
        } else {
          path =P0.toSt()+P1.toSt()+P3.toSt();
          if(getSign(P2,P0,P3)==PSS) path += P2.toSt();
        } 
      }
      Reg[S].setAttribute("d", "M"+path+"z");
    }
    function getSign(A,B,C){
      return((B.x-A.x)*(C.y-A.y)-(C.x-A.x)*(B.y-A.y)>=0)?1:-1;
    }
    function beginDrag(evt) {
      if(!DragPoint) {
        DragPoint = evt.target;
        svgDoc.appendChild(DragPoint);
        Ox = DragPoint.getAttribute("cx")-evt.clientX;
        Oy = DragPoint.getAttribute("cy")-evt.clientY;
        svgDoc.addEventListener("mousemove", Dragging, true);
      }
    }
    function Dragging(evt) {
      evt.stopPropagation();
      SetAttributes(DragPoint, ["cx", Ox+evt.clientX,"cy", Oy+evt.clientY]);
      RefreshRegion();
    }
    function endDrag(evt) {
      svgDoc.removeEventListener("mousemove", Dragging, true);
      DragPoint = null;
    }
//  ]]></script>
<style type="text/css">
td, input, button{font-size:30px;}
li {font-size:25px;}
</style>
<title>Bezier 曲線を操作する</title>
</head>
<body onload="init()">
  <table>
    <tr><td align="center">Bezier 曲線を操作する</td></tr>
    <tr>
      <td><svg:svg width="700" height="500" id="canvas"/></td>
      <td>
        <table id="Table" valign="top">
          <tr>
            <td colspan="3" align="center">
              <button onclick="SetPos(); return false;">設定</button>
            </td>
        </tr>
        <tr>
          <td>Portion</td>
          <td colspan="2" align="center">
            <input type="text" id="Portion" size="5" align="center"/>
          </td>
        </tr>
        </table>
      </td>
    </tr>
  </table>
  <ot>
    <li>Bezier曲線は4つの制御点の凸包内に含まれることを示すのがこのアプリケーションの目的です</li>
    <li>P0からP3と書かれた点(制御点)の位置を直接設定できます</li>
    <li>値を設定したら「設定」ボタンをクリックすることでその値が図に設定されます。</li>
    <li>右の文字P0からP3と同じ色の点(制御点)を直接ドラッグできます。</li>
    <li>ドラッグしたときは点の位置の値は右側のテキストボックスに直ちに反映します</li>
    <li>Portionの値は0と1の間の値でBezier曲線の途中の点のパラメータの値を設定します。</li>
    <li>黒い点はそれぞれの線分のPortion:(1-Portion)に内分する点を示します。</li>
    <li>Bezier曲線はこれら点で定まる小さなBezier曲線に一致することを示すためにそれらの点の凸包を描いています</li>
  </ot>
</body>
</html>
