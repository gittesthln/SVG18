<?xml version="1.0" encoding="utf-8" ?>
<html xmlns="http://www.w3.org/1999/xhtml" ref="html1"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:svg="http://www.w3.org/2000/svg">
<head>
  <script type="text/ecmascript" src="make-elm.js"/>
  <script type="text/ecmascript">
//    <![CDATA[
    var svgDoc, Offsetx, Offsety, DragPoint = null;
    var Points = [], P = [], Reg = [], PVal = [];
    var IPos =[[250,400,"red"],[530,400,"lime"],
               [410,130,"green"],[250,240,"orange"]];
    var NumPoints = IPos.length;
    var paths =[["fill","#DDD", "stroke","none","opacity","0.8"],
                ["fill","#C22", "stroke","none","opacity","0.8"],
                ["fill","#3D3", "stroke","none","opacity","0.8"],
                ["stroke-width","2","fill","none","stroke","black"],
                ["stroke-width","3","fill","none","stroke","black"]];
    function init() {
      var i, j, k, TR, TD, TBL;
      svgDoc = document.getElementById("canvas");
      MKSVGElm(svgDoc, "rect", 
        ["x", "0", "y", "0", "width", "700", "height", "500",
         "stroke-width", "3", "stroke", "black", "fill", "white"],[]);
      for(i=0;i<paths.length; i++) {
        Reg[i] = MKSVGElm(svgDoc, "path", paths[i],[]);
      }
      TBL = document.getElementById("Table");
      for(i=0; i<NumPoints; i++) {
        Points[i] = MKSVGElm(svgDoc, "circle",
          ["cx",IPos[i][0],"cy",IPos[i][1],"fill",IPos[i][2],"r","6"],
          ["mousedown", beginDrag, false, "mouseup", endDrag, false]);
        TR = MKHTMLElm(TBL, "tr",[],[]);
        TD = MKHTMLElm(TR, "td",["style", "color:"+ IPos[i][2]],[]);
        TD.appendChild(document.createTextNode("P"+i));
        TD = MKHTMLElm(TR, "td",[],[]);
        PVal[i] = [MKHTMLElm(TD, "input", ["type", "text", "size","3"],[])];
        TD = MKHTMLElm(TR, "td",[],[]);
        PVal[i][1] = MKHTMLElm(TD, "input", ["type", "text", "size","3"],[]);
      }
      for(k=(NumPoints-1)*NumPoints/2;k>0;k--,i++){
          Points[i] = MKSVGElm(svgDoc, "circle",["fill","black","r","6"],[]);
      }
      RefreshRegion();
    }
    function SetPoints() {
      for(var i=0;i<NumPoints;i++) {
        P[i] = [parseInt(PVal[i][0].value),parseInt(PVal[i][1].value)];
        SetAttributes(Points[i],["cx",P[i][0], "cy", P[i][1]]);
      }
      RefreshRegionN();
    }
    function RefreshRegion(){
      for(var i=0;i<NumPoints;i++) {
        P[i] =[parseFloat(Points[i].getAttribute("cx")),
               parseFloat(Points[i].getAttribute("cy"))];
        PVal[i][0].value = P[i][0];
        PVal[i][1].value = P[i][1];
      }
      RefreshRegionN();
    }
    function RefreshRegionN(){
      var i, j=NumPoints, k, d, db;
      db = "M"+PS(P[0])+"C"+PS(P[1])+PS(P[2])+PS(P[3]);
      d = "M"+PS(P[0])+PS(P[1])+PS(P[2])+PS(P[3]);
      for(i=NumPoints; i>1; i--) {
        d+= "M";
        for(k=1; k<i; k++, j++) {
          P[j] = [(P[j-i][0]+P[j-i+1][0])/2, (P[j-i][1]+P[j-i+1][1])/2];
          d += PS(P[j]);
          SetAttributes(Points[j],["cx", P[j][0]+"", "cy", P[j][1]+""]);
        }
      }
      Reg[3].setAttribute("d",d);
      Reg[4].setAttribute("d",db);
      PaintRegion(0,P[0],P[1],P[2],P[3]);
      PaintRegion(1,P[0],P[4],P[7],P[9]);
      PaintRegion(2,P[9],P[8],P[6],P[3]);
    }
    function PS(PP) {
      return PP[0]+","+PP[1]+" "
    }
    function PaintRegion(S, P0,P1,P2,P3){
      var path, PSS=getSign(P0,P1,P2);
      if(getSign(P0,P1,P3) != PSS) {
        if(getSign(P1,P2,P3)==PSS) {
          path = PS(P3)+PS(P1)+PS(P2);
          if(getSign(P2,P0,P3)==PSS) path += PS(P0);
        } else {
          path = PS(P3)+PS(P2)+PS(P0);
        } 
      } else {
        if(getSign(P1,P2,P3)==PSS) {
          path = PS(P0)+PS(P1)+PS(P2);
          if(getSign(P2,P0,P3)!=PSS) path += PS(P3);
        } else {
          path =PS(P0)+PS(P1)+PS(P3);
          if(getSign(P2,P0,P3)==PSS) path += PS(P2);
        } 
      }
      Reg[S].setAttribute("d", "M"+path+"z");
    }
    function getSign(A,B,C){
      return((B[0]-A[0])*(C[1]-A[1])-(C[0]-A[0])*(B[1]-A[1])>=0)?1:-1;
    }
    function beginDrag(event) {
      DragPoint = event.target;
      svgDoc.appendChild(DragPoint);
      Offsetx = DragPoint.getAttribute("cx")-event.clientX;
      Offsety = DragPoint.getAttribute("cy")-event.clientY;
      svgDoc.addEventListener("mousemove", Dragging, true);
    }
    function Dragging(event) {
      event.stopPropagation();
      SetAttributes(DragPoint,
        ["cx", Offsetx+event.clientX,"cy", Offsety+event.clientY]);
      RefreshRegion();
    }
    function endDrag(event) {
      svgDoc.removeEventListener("mousemove", Dragging, true);
    }
//  ]]></script>
<style type="text/css">
td, input, button{font-size:30px;}
</style>
</head>
<body onload="init()">
  <table>
    <tr>
      <td align="center">Bezier 曲線を操作する</td>
    </tr>
    <tr>
      <td>
        <svg:svg width="700" height="500" id="canvas"/>
      </td>
      <td>
        <table id="Table" valign="top">
          <tr>
            <td colspan="3" align="center">
              <button onclick="SetPoints(); return false;">設定</button>
            </td>
          </tr>
        </table>
      </td>
    </tr>
  </table>
</body>
</html>
